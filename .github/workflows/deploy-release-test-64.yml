# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: deploy-release

on:
  push:
    branches: [ main_64 ]

jobs:
  deploy-release:
    strategy:
      max-parallel: 3
      matrix:
        device:
        # - type: raspberrypi3
        #   fleet: info319/coderbot_test
        - type: raspberrypi3-64
          fleet: info319/coderbot_pi3_64_test
        - type: raspberrypi0-2w-64
          fleet: info319/coderbot_pi0w2_64_test
    runs-on: ubuntu-latest
    environment: test
    outputs:
      release_id: ${{ steps.build.outputs.release_id }}
    steps:
    - uses: actions/checkout@v3 # Checking out the repo
    - uses: balena-io/deploy-to-balena-action@v2.0.45
      id: build
      with:
        balena_token: ${{ secrets.BALENA_TOKEN }}
        fleet: ${{ matrix.device.fleet }}
        registry_secrets: ${{ secrets.GHCR_CREDS }}
        source: .
    - name: Log release ID built
      run: echo "Built release version ${{ steps.build.outputs.release_id }}"

  build-balena:
    strategy:
      matrix:
        device:
        # - type: raspberrypi3
        #   version: v5.3.21.dev
        #   fleet: info319/coderbot_test
        - type: raspberrypi3-64
          version: v6.5.1+rev4.dev
          fleet: info319/coderbot_pi3_64_test
        - type: raspberrypi0-2w-64
          version: 6.5.9+rev5.dev
          fleet: info319/coderbot_pi0w2_64_test
    env:
      IMAGE_NAME: coderbot_${{ matrix.device.type }}.img
      DEVICE_TYPE: ${{ matrix.device.type }}
      DEVICE_VERSION: ${{ matrix.device.version }}
      BALENA_FLEET: ${{ matrix.device.fleet }}
    needs: deploy-release
    runs-on: ubuntu-latest
    environment: test
    steps:
    - uses: actions/checkout@v3 # Checking out the repo
    - run: wget https://github.com/balena-io/balena-cli/releases/download/v21.1.9/balena-cli-v21.1.9-linux-x64-standalone.zip -O balena-cli-v21.1.9-linux-x64-standalone.zip
    - run: unzip balena-cli-v21.1.9-linux-x64-standalone.zip
    - run: export PATH=$PATH:$(pwd)/balena-cli
    - run: ./balena-cli/balena --version
    - run: ./balena-cli/balena login --token ${{ secrets.BALENA_TOKEN }}
    - run: ./balena-cli/balena os download $DEVICE_TYPE --version $DEVICE_VERSION --output $IMAGE_NAME
    - run: sudo mkdir /mnt/resin-boot
    - run: sudo mount -o loop,offset=$(( 512 * 8192)) $IMAGE_NAME /mnt/resin-boot
    - run: sudo cp rpi/config.txt  /mnt/resin-boot
    - run: sudo umount  /mnt/resin-boot
    - run: ./balena-cli/balena config generate --version $DEVICE_VERSION --deviceType $DEVICE_TYPE --fleet $BALENA_FLEET --network ethernet --appUpdatePollInterval 10 --dev -o config.json
    - run: ./balena-cli/balena os configure $IMAGE_NAME --fleet $BALENA_FLEET --config config.json --config-network ethernet
    - run: sudo ./balena-cli/balena config write --drive $IMAGE_NAME hostname coderbot
    - run: echo "RELEASE_COMMIT=current" >> $GITHUB_ENV #echo "RELEASE_COMMIT=$(./balena-cli/balena release ${{ needs.deploy-release.outputs.release_id }}|grep 'COMMIT'|awk '{print $2}')" >> $GITHUB_ENV
    - run: ./balena-cli/balena preload $IMAGE_NAME --fleet $BALENA_FLEET -c $RELEASE_COMMIT
    - run: mkdir -p dist
    - run: mv $IMAGE_NAME ./dist/.
    - name: Archive dist
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.device.type }}-${{ matrix.device.version }}-${{ github.run_number }}
        path: dist/*
